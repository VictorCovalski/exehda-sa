input {
  redis {
    id => "ubnt-smart-a"
    host => "redis-smart-a"
    data_type => "list"
    key => "ubnt"
    threads => 1
  }
}

filter {
    if [wlanTxBytes] {
        mutate {
                add_tag => [ "ubnt_ap" ]

                rename => { "apMac" => "ap_mac" }
                rename => { "essid" => "ap_essid" }
                rename => { "signal" => "ap_signal" }
                lowercase => ["deviceName"]
	}
        ruby { code => 'event.set("memTotal",event.get("memTotal").to_i * 1024)' }
        ruby { code => 'event.set("memFree",event.get("memFree").to_i * 1024)' }
        ruby { code => 'event.set("memBuffers",event.get("memBuffers").to_i * 1024.0)' }
        ruby { code => 'event.set("wlanTxRate",event.get("wlanTxRate").to_i * 125000.0)' }
        ruby { code => 'event.set("wlanRxRate",event.get("wlanRxRate").to_i * 125000.0)' }
    } else {
        mutate {
                add_tag => [ "ubnt_client" ]
                rename => { "signal" => "client_signal" }
                rename => { "lastip" => "client_ip" }
                rename => { "mac" => "client_mac" }
    }
	ruby { code => 'event.set("snr",event.get("client_signal").to_i - event.get("noisefloor").to_i)' }
    }
    mutate { remove_field => ["command", "name"] }
    mutate {
        add_field => {"@cr_type" => "ubnt"}
    }
}

output {
    redis {
        id => "redis-correactive"
        host => "redis-smart-a"
        data_type => list
        key => "events-smart-a-1"
    }
    elasticsearch {
        id => "elastic"
        hosts => ["elasticsearch:9200"]
        template_overwrite => true
        index => "%{[@cr_type]}-%{+YYYY.MM.dd}"
    }
}
