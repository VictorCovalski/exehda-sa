input {
  redis {
    id => "ap-syslog-smart-b"
    host => "redis-smart-b"
    data_type => "list"
    key => "ap-syslog"
    threads => 1
  }
}

filter {
    grok {
        id => "ap-syslog"
	patterns_dir => ["/usr/share/logstash/pipeline/patterns/"]
        match => {
            "message" => "%{APSYSLOG}"
        }
    }

    if [program] == "dnsmasq" or [program] == "dnsmasq-dhcp"{
        grok {
	patterns_dir => ["/usr/share/logstash/pipeline/patterns/"]
            match => ["ap_message","%{APDHCP}"]
            tag_on_failure => [""]
        }
    } else if [program] == "wireless" {
        grok {
	patterns_dir => ["/usr/share/logstash/pipeline/patterns/"]
            match => ["ap_message","%{APWIRELESS}"]
            tag_on_failure => [""]
        }
    }

    date { match => ["timestamp", "dd/MMM/yyyy:HH:mm:ss Z"]
            target => "logtimestamp" }
    mutate {
        add_field => {"@cr_type" => "ap-syslog"}
    }
}

output {
    redis {
        id => "redis-correactive"
        host => "redis-smart-b"
        data_type => list
        key => "events-smart-b"
    }
    elasticsearch {
        id => "elastic"
        hosts => ["elasticsearch:9200"]
        template_overwrite => true
        index => "%{[@cr_type]}-%{+YYYY.MM.dd}"
    }
}
