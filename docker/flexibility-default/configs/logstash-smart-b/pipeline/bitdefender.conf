input {
  redis {
    id => "bitdef-smart-b"
    host => "redis-smart-b"
    data_type => "list"
    key => "bitdef"
    threads => 1
  }
}

filter {
  if [source] =~ "spam.log" {
    grok {
        id => "bitdef-spam"
	patterns_dir => ["/usr/share/logstash/pipeline/patterns/"]
        match => { "message" => "%{BD_SPAM}" }
    }
    # get domain name from sender
    grok { match => ["sender","%{DATA}@%{GREEDYDATA:sender_domain}"] }

    # separe user from @university*. (CHANGE HERE)
    grok { match => ["recipient","%{DATA:user}@university.%{GREEDYDATA}"] }

    # get filter statistics from spam.log
    grok {
          match => { "message" => [
                 "RBL DNSBL: \[Enabled, Score: %{NUMBER:[rbl][score1]:int}\(%{NUMBER:[rbl][score2]:int}\), t: \(%{NUMBER:[rbl][time1]:float}(,%{NUMBER:[rbl][time2]:float}\))?",
                 "BW: \[Enabled, t: \(%{NUMBER:[bw][time1]:float}(,%{NUMBER:[bw][time2]:float}\))?",
                 "APM: \[Enabled, Score: %{NUMBER:[apm][score]:int}, t: \(%{NOTSPACE:[apm][time]:float}\), Flags: %{DATA:[apm][flags]}\]",
                 "URL: \[Enabled, t: \(%{NUMBER:[url][time1]:float}(,%{NUMBER:[url][time2]:float})?\)(, spam url: %{NOTSPACE:[url][spam_url]})?",
                 "RTDA: \[Enabled, t: \(%{NUMBER:rtda_time:float}","SGN: \[Enabled, t: \(%{NUMBER:[sgn][time1]:float}(,%{NUMBER:[sgn][time2]:float})?",
                 "Multi: \[Enabled, t: \(%{NUMBER:[multi][time1]:float},%{NUMBER:[multi][time2]:float}",
                 "Received: from %{NOTSPACE} \(%{NOTSPACE} \[%{IP:mail_source_ip}\]\)\t"
          ]}
          tag_on_failure => [""]
          break_on_match => false
    }
    #converts to 0.0 if the object is Nil
    ruby {
         code => 'event.set("bitdef_time", event.get("[rbl][time1]").to_f + event.get("[rbl][time2]").to_f + event.get("[apm][time]").to_f + event.get("[bw][time1]").to_f + event.get("[bw][time2]").to_f + event.get("[sgn][time]").to_f + event.get("[multi][time1]").to_f + event.get("[multi][time2]").to_f)'
    }

    mutate {
        add_field => {"@cr_type" => "bitdef"}
    }
  } else if [source] =~ "cf.log" {
    grok { 
        id => "bitdef-cf"
        patterns_dir => ["/usr/share/logstash/pipeline/patterns/"]
        match => ["message", "%{BD_CF}"] 
    }
    mutate {
        convert => {"total_time" => "float"}
        gsub => ["header_recipients","\"","",
                 "header_recipients",";",""]
        strip => ["header_recipents"]
        split => {"header_recipients" => " "}
    }
  }
}

output {
    redis {
        id => "redis-correactive"
        host => "redis-smart-b"
        data_type => list
        key => "events-smart-b"
    }
    elasticsearch {
        id => "elastic"
        hosts => ["elasticsearch:9200"]
        template_overwrite => true
        index => "%{[@cr_type]}-%{+YYYY.MM.dd}"
    }
}
